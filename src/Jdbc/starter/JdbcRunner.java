package Jdbc.starter;

import Jdbc.starter.util.ConnectionManager;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class JdbcRunner {
    public static void main(String[] args) {
//        System.out.println(getEmployeeBycompanyId(2, 1));
//        checkMetaData();


    }

    private static void checkMetaData() {
        try (Connection connection = ConnectionManager.open()) {
            DatabaseMetaData metaData = connection.getMetaData();

            var catalogs = metaData.getCatalogs();

            while (catalogs.next()) {
                var catalog = catalogs.getString(1);

                var schemas = metaData.getSchemas();

                while (schemas.next()) {
                    var schema = schemas.getString("TABLE_SCHEM");

                    var tables = metaData.getTables(catalog,schema, "%", new String[] {"TABLE"});

                    if (schema.equals("company_storage")) {
                        while (tables.next()) {

                            var table = tables.getString("TABLE_NAME");
                            var columns = metaData.getColumns(catalog,schema,table,null);
                            System.out.println(table);
                            System.out.println("---------------");
                            while (columns.next()) {

                                System.out.println(columns.getString("COLUMN_NAME"));
                            }
                            System.out.println("---------------");
                        }
                    }

                }
            }






        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


    private static List<Integer> getEmployeeBycompanyId(Integer companyId, Integer companyId2) {
        //language=PostgreSQL
        String sql = """
                select id
                from company_storage.employee
                where company_id = ? or company_id =  ?;
                """;


        List<Integer> array = new ArrayList<>();
        try (var connection = ConnectionManager.open();
             var statement = connection.prepareStatement(sql)) {
//            fetchSize - это лимит, сколько максимум строк за раз мы будем тянуть
//            из БД, сначала 50, потом еще 50 и еще, а не сразу 1000, к примеру
//            получаем данные итерационно
            statement.setFetchSize(50);
//            необходимо устанавливасть timeout на соединения, сколько мы ждем
//            выполнения запроса, в секундах
            statement.setQueryTimeout(10);
//            берет всего столько то строк
            statement.setMaxRows(100);
//            установка значений на место вопросов
            statement.setInt(1, companyId);
            statement.setInt(2, companyId2);

//            делаем запрос к базе и считываем результат из resultSet
            var resultSet = statement.executeQuery();
            while (resultSet.next()) {
                array.add(resultSet.getObject("id", Integer.class)); // NULL safe
            }

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return array;

    }


//    public static void main(String[] args) throws SQLException {
////        Class<Driver> driverClass = Driver.class;
////
////        try (Connection connection = ConnectionManager.open();
////             Statement statement = connection.createStatement()) {
////
////
////            // Устанавливаем новую схему как текущую
//////            statement.execute("SET search_path TO company_storage");
//////            System.out.println(connection.getSchema());
////
//////            String sql = """
//////                    create table if not exists info(
//////                    id serial primary key,
//////                    data text not null
//////                    );
//////                    """;
////
////            String sql2 = """
////                    insert into info (data)
////                    values
////                    ('autogenerated')
////                    """;
////
//////            resultSet автоматически закроется, когда закроется Statement
//////            boolean executeResult = statement.execute(sql);
////            var executeResult = statement.executeUpdate(sql2, Statement.RETURN_GENERATED_KEYS);
////            var generatedKeys = statement.getGeneratedKeys();
////            System.out.println(executeResult);
////
////            if (generatedKeys.next()) {
////                var generatedId = generatedKeys.getInt("id");
////                System.out.println(generatedId);
////            }
////
//////            while (executeResult.next()) {
//////                System.out.println(executeResult.getLong("id"));
//////                System.out.println(executeResult.getString("first_name"));
//////                System.out.println(executeResult.getString("last_name"));
//////                System.out.println(executeResult.getBigDecimal("salary"));
//////                System.out.println(executeResult.getLong("company_id"));
//////                System.out.println("-------------");
//////            }
////
////        }
//
//    }


}
